/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/components/Timer.ts":
/*!*********************************!*\
  !*** ./src/components/Timer.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TimerComponent\": () => (/* binding */ TimerComponent)\n/* harmony export */ });\n/* harmony import */ var _ts_utils_helper_functions_dom_functions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ts-utils/helper-functions/dom.functions */ \"./src/ts-utils/helper-functions/dom.functions.ts\");\n/* harmony import */ var _ts_utils_helper_functions_timer_component_functions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ts-utils/helper-functions/timer-component.functions */ \"./src/ts-utils/helper-functions/timer-component.functions.ts\");\n//Utils\r\n//DOM helper functions\r\n\r\n//Component specific functions\r\n\r\n//Component specific variables\r\n/**\r\n * We set the elements of our Web Component inside a `<template>`\r\n */\r\nconst timerTemplate = document.createElement(\"template\");\r\nconst dialogStyle = /* css */ `\r\n.timer-dialog{\r\n  overflow-y: hidden;\r\n  border-radius: 10px;\r\n\r\n  z-index: 69;\r\n\r\n  border: transparent;\r\n  padding: 30px;\r\n\r\n  background-color: rgb(35, 35, 35);\r\n  color: white;\r\n\r\n  position: fixed;\r\n  inset: 50%;\r\n  translate: -50% -50%;\r\n\r\n  aspect-ratio: 1/1;\r\n  height: 435px;\r\n\r\n}\r\n\r\n.timer-dialog::backdrop{\r\n  background-color: #000000ad;\r\n}\r\n\r\n @media screen and (width <=768px) {\r\n      .timer-dialog{\r\n          padding: 30px 15px;\r\n      }\r\n}\r\n\r\n.timer-dialog__title-delete{\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  gap: 5px;\r\n\r\n}\r\n\r\n.timer-dialog__title{\r\n  \r\n}\r\n\r\n.timer-dialog__container {\r\n  margin-top: 60px;\r\n\r\n  background-color: rgb(31, 31, 31);\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 5px;\r\n\r\n  padding: 5px;\r\n\r\n  border: 2px solid #333333;\r\n  border-bottom: 2px solid rgb(146, 146, 146);\r\n  border-radius: 6px;\r\n\r\n  font-weight: 700;\r\n}\r\n\r\n.timer-dialog__container:has(input:focus){\r\n  border-bottom: 2px solid #e4505c;\r\n}\r\n\r\n.timer-dialog__slot {\r\n  position: relative;\r\n}\r\n\r\n.timer-dialog__slot--hours {}\r\n\r\n.timer-dialog__slot--minutes {}\r\n\r\n.timer-dialog__slot--seconds {}\r\n\r\n.timer-dialog__label-input{\r\n    margin: 80px 0 70px 0;\r\n\r\n    position: relative;\r\n}\r\n\r\n\r\n\r\n.timer-dialog__label{\r\n  width: 100%;\r\n\r\n  display: inline-flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.timer-dialog__label > svg{\r\n  flex: 1;\r\n}\r\n\r\n.timer-dialog__input {\r\n  text-align: center;\r\n\r\n  background-color: inherit;\r\n  border: transparent;\r\n\r\n  padding: 10px 10px;\r\n\r\n  border-radius: 2px;\r\n\r\n  display: inline-block;\r\n\r\n  min-width: 50px;\r\n  max-width: 80px;\r\n\r\n  font-size: 32px;\r\n  font-weight: inherit;\r\n\r\n  color: rgb(165, 165, 165);\r\n}\r\n\r\n.timer-dialog__input--title{\r\n  flex: 10;\r\n  \r\n  height: 35px;\r\n\r\n  padding: 5px 50px 5px 10px;\r\n\r\n  font-weight: inherit;\r\n  font-size: 14px;\r\n\r\n  color: white;\r\n  background-color: rgb(48, 48, 48);\r\n\r\n  border: transparent;\r\n  border-bottom: 2px solid rgb(146, 146, 146);\r\n  border-radius: 3px;\r\n} \r\n\r\n.timer-dialog__input--title:focus{\r\n  outline: transparent;\r\n  \r\n  background-color: rgb(31, 31, 31);\r\n\r\n  border-bottom: 2px solid #e4505c;\r\n}\r\n\r\n \r\n\r\n.timer-dialog__input--reset{\r\n  position: absolute;\r\n  right: 5%;\r\n  top: 15%;\r\n\r\n  color: rgb(177, 177, 177);\r\n  background-color: transparent;\r\n  border: transparent;\r\n  \r\n  aspect-ratio: 1/1;\r\n  height: 25px;\r\n}\r\n\r\n.timer-dialog__input--reset:hover{\r\n  background-color: rgb(44, 44, 44);\r\n\r\n}\r\n\r\n.timer-dialog__input--reset:active{\r\n  background-color: rgb(40, 40, 40);\r\n  color: rgb(141, 141, 141);\r\n\r\n}\r\n\r\n.timer-dialog__input[type=\"number\"]{\r\n  -moz-appearance: textfield;\r\n}\r\n\r\n.timer-dialog__input[type=\"number\"]::-webkit-inner-spin-button{\r\n  -webkit-appearance: none;\r\n -moz-appearance:textfield;\r\n   appearance: none;\r\n}\r\n\r\n.timer-dialog__input[type=\"number\"]::-webkit-outer-spin-button {\r\n  -webkit-appearance: none;\r\n -moz-appearance:textfield;\r\n   appearance: none;\r\n}\r\n\r\n.timer-dialog__input:focus {\r\n  background-color: rgb(44, 44, 44);\r\n  outline: transparent;\r\n    color: white;\r\n}\r\n\r\n.timer-dialog__input--hours {}\r\n\r\n.timer-dialog__input--minutes {}\r\n\r\n.timer-dialog__input--seconds {}\r\n\r\n.timer-dialog__button {\r\n  position: absolute;\r\n  left: 50%;\r\n  translate: -50% 0%;\r\n\r\n  background-color: transparent;\r\n  color: inherit;\r\n\r\n  border: transparent;\r\n  border-radius: 5px;\r\n\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  aspect-ratio: 1/1;\r\n  height: 30px;\r\n\r\n}\r\n\r\n.timer-dialog__button:hover {\r\n  background-color: rgb(47, 47, 47);\r\n}\r\n\r\n.timer-dialog__button:active {\r\n  background-color: rgb(42, 42, 42);\r\n}\r\n\r\n.timer-dialog__delete {\r\n  color: rgb(213, 130, 139);\r\n  padding: 8px;\r\n\r\n  border-radius: 5px;\r\n\r\n  outline: transparent;\r\n}\r\n.timer-dialog__delete:hover {\r\n   background-color: rgb(47, 47, 47);\r\n}\r\n.timer-dialog__delete:active {\r\n  background-color: rgb(42, 42, 42);\r\n}\r\n\r\n.timer-dialog__button--increment {\r\n  bottom: 130%;\r\n}\r\n\r\n.timer-dialog__button--decrement {\r\n  top: 130%;\r\n}\r\n\r\n.timer-dialog__button--decrement > svg{\r\n  rotate: 180deg;\r\n}\r\n\r\n.timer-dialog__button--cancel{\r\n  flex: 1;\r\n  \r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 10px;\r\n\r\n  padding: 5px 15px;\r\n\r\n  border-radius: 5px;\r\n\r\n  background-color: rgb(46, 46, 46);\r\n}\r\n\r\n.timer-dialog__button--register{\r\n  flex: 1;\r\n  \r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 10px;\r\n\r\n  padding: 5px 15px;\r\n\r\n  border-radius: 5px;\r\n\r\n  background-color: rgb(228, 80, 92);\r\n  color: black;\r\n}\r\n\r\n.timer-dialog__button--cancel> svg, .timer-dialog__button--register> svg{\r\n  width: fit-content !important;\r\n}\r\n\r\n.timer-dialog__button--cancel:hover {\r\n   background-color: rgb(51, 51, 51);\r\n}\r\n\r\n.timer-dialog__button--cancel:active {\r\n  background-color: rgb(40, 40, 40);\r\n  outline: 2px solid rgb(43, 43, 43);\r\n}\r\n\r\n.timer-dialog__button--register:hover {\r\n   background-color: rgb(208, 75, 85);\r\n}\r\n\r\n.timer-dialog__button--register:active {\r\n  background-color: rgb(189, 71, 80);\r\n  color: rgb(112, 42, 47)\r\n}\r\n\r\n\r\n.timer-dialog__buttons{\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  gap: 10px;\r\n}\r\n\r\n.timer-dialog__slot-separator {\r\n  font-size: 32px;\r\n  font-weight: inherit;\r\n\r\n  color: white;\r\n}\r\n\r\n`;\r\nconst timerStyle = /* css */ `\r\n*,\r\n::before,\r\n::after {\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\n\r\n*::-moz-selection {\r\n    background-color: rgb(240, 18, 36);\r\n    color: white;\r\n    ;\r\n}\r\n\r\n*::selection {\r\n    background-color: rgb(240, 18, 36);\r\n    color: white;\r\n    ;\r\n}\r\n\r\n\r\n.hide {\r\n    display: none;\r\n}\r\n\r\nbutton {\r\n    border-color: transparent;\r\n    background-color: transparent;\r\n\r\n    font-family: inherit;\r\n\r\n    color: var(--color-primary);\r\n\r\n    \r\n  }\r\n\r\nbutton:hover {\r\n      cursor: pointer;\r\n}\r\n\r\nbutton:hover:disabled {\r\n        cursor: not-allowed;\r\n}\r\n\r\nsvg{\r\n  aspect-ratio: 1/1;\r\n  width: 100%;\r\n\r\n  pointer-events: none;\r\n}\r\n\r\n.timer__svg{\r\n  width: 75%;\r\n}\r\n\r\n.circle{\r\n  scale: -100% 100%;\r\n  fill: transparent;\r\n    \r\n  stroke: rgb(210, 77, 87);\r\n  stroke-width: 5px;\r\n  stroke-linecap: round;\r\n  stroke-dasharray: var(--svg-dasharray);\r\n  stroke-dashoffset: var(--svg-dashoffset);\r\n\r\n  transition: stroke-dasharray 350ms ease, stroke-dashoffset 350ms ease;\r\n\r\n  transform-origin: center;\r\n  rotate: 90deg;\r\n}\r\n\r\n.circle--bg{\r\n  fill: none;\r\n    \r\n  stroke: #3e3e3e;\r\n\r\n  transition: stroke 150ms ease;\r\n  stroke-width: 5px;\r\n\r\n  transform-origin: center;\r\n  rotate: 270deg;\r\n}\r\n\r\n.timer-component__container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  \r\n  width:100%;\r\n  \r\n  position: relative;\r\n  \r\n  background-color: rgb(50, 50, 50);\r\n  transition: \r\n    filter 75ms ease, \r\n    scale 150ms ease,\r\n    box-shadow 150ms ease\r\n    ;\r\n    \r\n  box-shadow: 0px 3px 5px 0px rgb(32, 32, 32);\r\n\r\n  outline: 2px solid rgb(42, 42, 42);\r\n  border-radius: 8px;\r\n}\r\n  \r\n  .timer-component__container:hover{\r\n  filter: brightness(93%);\r\n\r\n  transform-origin: bottom;\r\n  scale: 101%;\r\n\r\n  box-shadow: 0px 0px 15px 0px rgb(32, 32, 32);\r\n  outline: 2px solid rgb(54, 54, 54);\r\n}\r\n  \r\n  .timer-component__container:active{\r\n  scale: 100%;\r\n\r\n  box-shadow: 0px 0px 15px 0px rgb(32, 32, 32);\r\n  outline: 2px solid rgb(54, 54, 54);\r\n}\r\n\r\n.timer-component__title{\r\n    width: 100%;\r\n    padding: 10px 40px 10px 20px;\r\n\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n}\r\n\r\n.timer-component__title:empty{\r\n  height: 45px;\r\n  padding: 0;\r\n}\r\n\r\n.timer-component__paragraph {\r\n    display: inline-block;\r\n    margin: 0;\r\n  \r\n    position: absolute;\r\n    left: 50%;\r\n    right: 50%;\r\n    top: 47%;\r\n    translate: -50% -50%;\r\n  \r\n    width: min-content;\r\n    height: min-content;\r\n\r\n    font-variant-numeric: tabular-nums;\r\n    font-size: 44px;\r\n    font-weight: 500;\r\n  }\r\n\r\n\r\n.timer-component__button{\r\n  border: 2px solid rgb(64, 64, 64);\r\n  aspect-ratio: 1/1;\r\n  width: 35px;\r\n\r\n  border-radius: 50%;\r\n  \r\n}\r\n\r\n.timer-component__buttons-container{\r\n  width: 100%;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 20px;\r\n\r\n  padding-bottom: 25px;\r\n  padding-top: 20px\r\n}\r\n\r\n.timer-component__svg{\r\n  aspect-ratio: 1/1;\r\n  width: 20px;\r\n\r\n}\r\n\r\n.timer-component__svg--pause{\r\n \r\n}\r\n\r\n.timer-component__svg--play{\r\n\r\n}\r\n\r\n.timer-component__svg--restart{\r\n\r\n}\r\n\r\n.timer-component__button{\r\n  display: flex;\r\n    flex-direction: row;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n\r\n.timer-component__button--play{\r\n  left: 30%;\r\n  background-color: rgb(210, 77, 87);\r\n  color: black;\r\n}\r\n\r\n.timer-component__button--play:disabled{\r\n  background-color: rgb(82, 82, 82);\r\n  color: rgb(174, 174, 174);\r\n}\r\n\r\n.timer-component__button--restart{\r\n  right: 30%;\r\n  background-color: rgb(62, 62, 62);\r\n  color: white;\r\n}\r\n\r\n.timer-component__button--restart:disabled{\r\n  background-color: rgb(59, 59, 59);\r\n  color: rgb(125, 125, 125);\r\n}\r\n`;\r\n/**\r\n * Style for the component\r\n */\r\nconst componentStyle = /* css */ `\r\n${timerStyle}\r\n${dialogStyle}\r\n`;\r\nconst dialogUI = /* html */ `\r\n<dialog class=\"timer-dialog\">\r\n  <div class=\"timer-dialog__title-delete\">\r\n    <h2 class=\"timer-dialog__title\">Modify the timer</h2>\r\n    <button type=\"button\" class=\"timer-dialog__delete\">\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 92 92\" width=\"20\" height=\"20\" fill=\"currentColor\">\r\n    <path\r\n        d=\"m78.4 30.4-3.1 57.8c-.1 2.1-1.9 3.8-4 3.8H20.7c-2.1 0-3.9-1.7-4-3.8l-3.1-57.8c-.1-2.2 1.6-4.1 3.8-4.2 2.2-.1 4.1 1.6 4.2 3.8l2.9 54h43.1l2.9-54c.1-2.2 2-3.9 4.2-3.8 2.1.1 3.8 2 3.7 4.2zM89 17c0 2.2-1.8 4-4 4H7c-2.2 0-4-1.8-4-4s1.8-4 4-4h22V4c0-1.9 1.3-3 3.2-3h27.6C61.7 1 63 2.1 63 4v9h22c2.2 0 4 1.8 4 4zm-53-4h20V8H36v5zm1.7 65c2 0 3.5-1.9 3.5-3.8l-1-43.2c0-1.9-1.6-3.5-3.6-3.5-1.9 0-3.5 1.6-3.4 3.6l1 43.3c0 1.9 1.6 3.6 3.5 3.6zm16.5 0c1.9 0 3.5-1.6 3.5-3.5l1-43.2c0-1.9-1.5-3.6-3.4-3.6-2 0-3.5 1.5-3.6 3.4l-1 43.2c-.1 2 1.5 3.7 3.5 3.7-.1 0-.1 0 0 0z\" />\r\n</svg>  \r\n\r\n    </button>\r\n  </div>\r\n<!--    -->\r\n<!--    -->\r\n  <!-- Timer begin -->\r\n\r\n\r\n<form class=\"timer-dialog__container\">\r\n  <section class=\"timer-dialog__slot timer-dialog__slot--hours\"> \r\n  <input type=\"number\" value=\"00\" min=\"0\" max=\"99\" class=\"timer-dialog__input timer-dialog__input--hours\">\r\n  <button type=\"button\" class=\"timer-dialog__button timer-dialog__button--increment\">\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\" width=\"10\" height=\"10\" fill=\"white\">\r\n    <path\r\n        d=\"M102.299 58.5c-3.955 4.046-9.458 4.363-14.291 0L52.579 24.525 17.141 58.5c-4.834 4.363-10.347 4.046-14.269 0a10.77 10.77 0 0 1 0-14.643C6.555 40.066 45.44 3.04 45.44 3.04a9.917 9.917 0 0 1 14.286 0s38.868 37.026 42.568 40.817a10.764 10.764 0 0 1 0 14.643Z\" />\r\n</svg>\r\n</button>\r\n  <button type=\"button\" class=\"timer-dialog__button timer-dialog__button--decrement\">  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\" width=\"10\" height=\"10\" fill=\"white\">\r\n    <path\r\n        d=\"M102.299 58.5c-3.955 4.046-9.458 4.363-14.291 0L52.579 24.525 17.141 58.5c-4.834 4.363-10.347 4.046-14.269 0a10.77 10.77 0 0 1 0-14.643C6.555 40.066 45.44 3.04 45.44 3.04a9.917 9.917 0 0 1 14.286 0s38.868 37.026 42.568 40.817a10.764 10.764 0 0 1 0 14.643Z\" />\r\n</svg></button>\r\n</section>\r\n  <div class=\"timer-dialog__slot-separator\">:</div>\r\n  <section class=\"timer-dialog__slot timer-dialog__slot--minutes\"> \r\n  <input type=\"number\" value=\"00\" min=\"0\" max=\"59\" class=\"timer-dialog__input timer-dialog__input--minutes\">\r\n  <button type=\"button\" class=\"timer-dialog__button timer-dialog__button--increment\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\" width=\"10\" height=\"10\" fill=\"white\">\r\n    <path\r\n        d=\"M102.299 58.5c-3.955 4.046-9.458 4.363-14.291 0L52.579 24.525 17.141 58.5c-4.834 4.363-10.347 4.046-14.269 0a10.77 10.77 0 0 1 0-14.643C6.555 40.066 45.44 3.04 45.44 3.04a9.917 9.917 0 0 1 14.286 0s38.868 37.026 42.568 40.817a10.764 10.764 0 0 1 0 14.643Z\" />\r\n</svg></button>\r\n  <button type=\"button\" class=\"timer-dialog__button timer-dialog__button--decrement\">  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\" width=\"10\" height=\"10\" fill=\"white\">\r\n    <path\r\n        d=\"M102.299 58.5c-3.955 4.046-9.458 4.363-14.291 0L52.579 24.525 17.141 58.5c-4.834 4.363-10.347 4.046-14.269 0a10.77 10.77 0 0 1 0-14.643C6.555 40.066 45.44 3.04 45.44 3.04a9.917 9.917 0 0 1 14.286 0s38.868 37.026 42.568 40.817a10.764 10.764 0 0 1 0 14.643Z\" />\r\n</svg></button>\r\n  </section>\r\n  <div class=\"timer-dialog__slot-separator\">:</div>\r\n  <section class=\"timer-dialog__slot timer-dialog__slot--seconds\"> \r\n  <input type=\"number\" value=\"00\" min=\"0\" max=\"59\" class=\"timer-dialog__input timer-dialog__input--seconds\">\r\n  <button type=\"button\" class=\"timer-dialog__button timer-dialog__button--increment\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\" width=\"10\" height=\"10\" fill=\"white\">\r\n    <path\r\n        d=\"M102.299 58.5c-3.955 4.046-9.458 4.363-14.291 0L52.579 24.525 17.141 58.5c-4.834 4.363-10.347 4.046-14.269 0a10.77 10.77 0 0 1 0-14.643C6.555 40.066 45.44 3.04 45.44 3.04a9.917 9.917 0 0 1 14.286 0s38.868 37.026 42.568 40.817a10.764 10.764 0 0 1 0 14.643Z\" />\r\n</svg></button>\r\n  <button type=\"button\" class=\"timer-dialog__button timer-dialog__button--decrement\">  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\" width=\"10\" height=\"10\" fill=\"white\">\r\n    <path\r\n        d=\"M102.299 58.5c-3.955 4.046-9.458 4.363-14.291 0L52.579 24.525 17.141 58.5c-4.834 4.363-10.347 4.046-14.269 0a10.77 10.77 0 0 1 0-14.643C6.555 40.066 45.44 3.04 45.44 3.04a9.917 9.917 0 0 1 14.286 0s38.868 37.026 42.568 40.817a10.764 10.764 0 0 1 0 14.643Z\" />\r\n</svg></button>\r\n  </section>\r\n</form>\r\n\r\n<!-- Timer end -->\r\n<!--    -->\r\n<!--    -->\r\n\r\n<form class=\"timer-dialog__label-input\">\r\n  <label class=\"timer-dialog__label\" for=\"title-input\"> \r\n    <svg stroke=\"currentColor\" fill=\"none\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke-linecap=\"round\" stroke=\"currentColor\"\r\n    stroke-linejoin=\"round\" height=\"16px\" width=\"16px\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path>\r\n    <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path>\r\n</svg>\r\n    <input type=\"text\" class=\"timer-dialog__input--title\" placeholder=\"Name of timer\" id=\"title-input\"/> \r\n  </label>\r\n  <input type=\"reset\" class=\"timer-dialog__input--reset\" value=\"×\">\r\n</form>\r\n\r\n<div class=\"timer-dialog__buttons\">\r\n  <button class=\"timer-dialog__button--register\">\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\" width=\"16\" height=\"16\">\r\n    <path fill=\"currentColor\"\r\n        d=\"M31.707,7.293l-7-7A1,1,0,0,0,24,0H1A1,1,0,0,0,0,1V31a1,1,0,0,0,1,1H31a1,1,0,0,0,1-1V8A1,1,0,0,0,31.707,7.293ZM18,2V6H8V2ZM8,30V18H24V30Zm22,0H26V17a1,1,0,0,0-1-1H7a1,1,0,0,0-1,1V30H2V2H6V7A1,1,0,0,0,7,8H19a1,1,0,0,0,1-1V2h3.586L30,8.414Z\" />\r\n</svg> Register</button>\r\n\r\n  <button class=\"timer-dialog__button--cancel\">\r\n   <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 96 96\" width=\"20\" height=\"20\" fill=\"white\">\r\n    <switch>\r\n        <g>\r\n            <path\r\n                d=\"m53.657 48 25.171-25.172a4 4 0 1 0-5.656-5.656L48 42.343 22.829 17.172a4 4 0 0 0-5.657 5.656L42.344 48 17.172 73.172a4 4 0 1 0 5.657 5.656L48 53.657l25.172 25.171C73.953 79.609 74.977 80 76 80s2.048-.391 2.828-1.172a4 4 0 0 0 0-5.656L53.657 48z\" />\r\n        </g>\r\n    </switch>\r\n</svg>\r\nCancel</button>\r\n</div>\r\n</dialog>\r\n`;\r\nconst timerUI = /* html */ `\r\n  <h3 class=\"timer-component__title\"></h3>\r\n  <svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\" class=\"timer__svg\">\r\n    <circle cx=\"50\" cy=\"50\" r=\"45\" class=\"timer-component__circle--bg circle--bg\"></circle>\r\n    <circle cx=\"50\" cy=\"50\" r=\"45\" class=\"timer-component__circle circle\"></circle>\r\n  </svg>\r\n  <p class=\"timer-component__paragraph\">00:00:00</p>\r\n  <section class=\"timer-component__buttons-container\">\r\n\r\n    <button type=\"button\" class=\"timer-component__button timer-component__button--play\">\r\n    <svg version=\"1.0\" xmlns=\"http://www.w3.org/2000/svg\"\r\n      viewBox=\"0 0 256.000000 256.000000\" preserveAspectRatio=\"xMidYMid meet\" class=\"timer-component__svg timer-component__svg--play\">\r\n        <g transform=\"translate(0.000000,256.000000) scale(0.100000,-0.100000)\" fill=\"currentColor\" stroke=\"none\">\r\n            <path d=\"M623 2210 c-18 -10 -42 -39 -55 -62 l-23 -43 0 -820 0 -820 22 -47\r\n    c29 -62 70 -88 143 -88 33 0 72 8 98 20 24 11 175 108 335 217 161 109 398\r\n    268 527 354 129 86 247 167 261 181 109 103 115 243 14 344 -46 45 -1071 734\r\n    -1140 765 -54 25 -140 25 -182 -1z\" />\r\n        </g>\r\n    </svg>\r\n    <svg version=\"1.0\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 256 256\"\r\n      preserveAspectRatio=\"xMidYMid meet\" class=\"timer-component__svg timer-component__svg--pause hide\">\r\n  \r\n      <g transform=\"translate(0,256) scale(0.10,-0.10)\" fill=\"currentColor\" stroke=\"none\">\r\n          <path d=\"M610 1280 l0 -840 165 0 165 0 0 840 0 840 -165 0 -165 0 0 -840z\" />\r\n          <path d=\"M1620 1280 l0 -840 165 0 165 0 0 840 0 840 -165 0 -165 0 0 -840z\" />\r\n      </g>\r\n  </svg>\r\n  </button>\r\n    <button type=\"button\" class=\"timer-component__button timer-component__button--restart\" disabled=\"true\">\r\n      <svg version=\"1.0\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 256 256\"\r\n          preserveAspectRatio=\"xMidYMid meet\" \r\n           class=\"timer-component__svg timer-component__svg--restart\"\r\n          >\r\n  \r\n              <g transform=\"translate(0,256) scale(0.10,-0.10)\" fill=\"currentColor\" stroke=\"none\">\r\n                  <path d=\"M1200 2336 c-279 -58 -528 -222 -681 -447 -49 -73 -123 -225 -140\r\n          -291 -7 -27 -16 -48 -20 -48 -4 0 -37 58 -74 130 -36 71 -74 134 -85 140 -47\r\n          25 -104 1 -115 -50 -6 -25 14 -69 130 -289 127 -243 138 -261 171 -271 33 -11\r\n          42 -7 291 123 268 141 291 158 277 211 -8 34 -37 57 -71 58 -19 1 -92 -32\r\n          -202 -91 -96 -50 -175 -91 -177 -91 -20 0 33 175 83 275 93 187 273 355 463\r\n          431 161 65 342 87 497 60 358 -62 633 -304 739 -651 25 -82 28 -105 28 -250 1\r\n          -137 -3 -171 -22 -239 -105 -365 -387 -616 -756 -672 -212 -33 -447 17 -621\r\n          132 -87 56 -112 62 -148 34 -21 -17 -27 -30 -27 -60 0 -32 6 -44 38 -70 49\r\n          -40 195 -116 285 -146 147 -50 352 -68 507 -44 101 16 246 66 342 118 281 152\r\n          475 412 544 728 23 107 23 321 0 428 -89 408 -381 716 -786 827 -97 27 -371\r\n          35 -470 15z\" />\r\n              </g>\r\n      </svg>\r\n  </button>\r\n  </section>\r\n`;\r\n/**\r\n * Content of the component\r\n */\r\ntimerTemplate.innerHTML = /* html */ `\r\n<style>\r\n  ${componentStyle}\r\n</style>\r\n\r\n<div class=\"timer-component__container\">\r\n  ${dialogUI}\r\n  ${timerUI}\r\n</div>\r\n`;\r\nclass TimerComponent extends HTMLElement {\r\n    constructor() {\r\n        super();\r\n        /**\r\n         * Container that holds our web component\r\n         *\r\n         * to avoid affecting the style of other page elements\r\n         */\r\n        const shadowRoot = this.attachShadow({ mode: \"open\" });\r\n        /**\r\n         * HTML of the component\r\n         */\r\n        const clonedTemplate = timerTemplate.content.cloneNode(true);\r\n        /**\r\n         * We append the template content to the container\r\n         */\r\n        shadowRoot.appendChild(clonedTemplate);\r\n        this.callback = null;\r\n        this.callbackIdsArray = [];\r\n    }\r\n    /**\r\n     * Gets the value of the initial timer\r\n     */\r\n    get initialTime() {\r\n        const attributeValue = this.getAttribute(\"initial-time\");\r\n        const attributeIsNotANumber = isNaN(Number(attributeValue));\r\n        if (attributeIsNotANumber) {\r\n            return 0;\r\n        }\r\n        return Number(attributeValue);\r\n    }\r\n    /**\r\n     * Sets the value of the initialTime\r\n     */\r\n    set initialTime(value) { }\r\n    /**\r\n     * Getter that gets the current time of the timer in seconds\r\n     *\r\n     * **ex:**\r\n     * ```js\r\n     *  const a = this.currentTime;\r\n     * ```\r\n     */\r\n    get currentTime() {\r\n        const attributeValue = this.getAttribute(\"current-time\");\r\n        const attributeIsNotANumber = isNaN(Number(attributeValue));\r\n        if (attributeIsNotANumber) {\r\n            return 0;\r\n        }\r\n        return Number(attributeValue);\r\n    }\r\n    /**\r\n     * Setter that changes the value of the timer\r\n     *\r\n     * **ex:**\r\n     * ```js\r\n      this.currentTime = 69;\r\n     * ```\r\n     */\r\n    set currentTime(value) { }\r\n    get timerTitle() {\r\n        return this.getAttribute(\"timer-title\");\r\n    }\r\n    set timerTitle(title) { }\r\n    get isRunning() {\r\n        const attributeValue = this.getAttribute(\"is-running\");\r\n        //@ts-ignore\r\n        return JSON.parse(attributeValue);\r\n    }\r\n    set isRunning(booleanValue) { }\r\n    /**\r\n     * Static getter methods that indicates the\r\n     * list of attributes that the custom element wants to observe for changes.\r\n     *\r\n     * There are currently 5 custom attributes in which 4 need to be observed\r\n     *\r\n     * (we're not observing the `interval-id` attribute as it doesn't need to)\r\n     */\r\n    static get observedAttributes() {\r\n        return [\"initial-time\", \"current-time\", \"timer-title\", \"is-running\"];\r\n    }\r\n    /**\r\n     * Method called every time the element is inserted into the DOM\r\n     */\r\n    connectedCallback() {\r\n        var _a;\r\n        //@ts-ignore\r\n        const container = (0,_ts_utils_helper_functions_dom_functions__WEBPACK_IMPORTED_MODULE_0__.selectQuery)(\".timer-component__container\", \r\n        //@ts-ignore\r\n        this.shadowRoot);\r\n        /**\r\n         * We get the circle\r\n         */\r\n        //@ts-ignore\r\n        this.svgCircle = (0,_ts_utils_helper_functions_dom_functions__WEBPACK_IMPORTED_MODULE_0__.selectQuery)(\".circle\", this.shadowRoot);\r\n        //@ts-ignore\r\n        const svgCircleLength = (_a = this.svgCircle) === null || _a === void 0 ? void 0 : _a.getTotalLength();\r\n        /**\r\n         * We set the style prop of these variables to equal to the svgLength\r\n         */\r\n        (0,_ts_utils_helper_functions_dom_functions__WEBPACK_IMPORTED_MODULE_0__.setStyleProp)(\"--svg-dasharray\", `${svgCircleLength}`, container);\r\n        (0,_ts_utils_helper_functions_dom_functions__WEBPACK_IMPORTED_MODULE_0__.setStyleProp)(\"--svg-dashoffset\", `${svgCircleLength}`, container);\r\n        //@ts-ignore\r\n        container === null || container === void 0 ? void 0 : container.addEventListener(\"click\", (e) => {\r\n            var _a, _b;\r\n            const clickedElement = e.target;\r\n            const modalWindow = (0,_ts_utils_helper_functions_dom_functions__WEBPACK_IMPORTED_MODULE_0__.selectQuery)(\".timer-dialog\", container);\r\n            //@ts-ignore\r\n            const isButton = clickedElement.tagName.includes(\"BUTTON\");\r\n            if (isButton) {\r\n                (0,_ts_utils_helper_functions_timer_component_functions__WEBPACK_IMPORTED_MODULE_1__.handleButtonEvents)(clickedElement);\r\n            }\r\n            else {\r\n                const isNotContainer = clickedElement !== modalWindow;\r\n                if (isNotContainer) {\r\n                    //@ts-ignore\r\n                    const modalIsAlreadyOpened = (_a = modalWindow === null || modalWindow === void 0 ? void 0 : modalWindow.attributes) === null || _a === void 0 ? void 0 : _a.open;\r\n                    //@ts-ignore\r\n                    const modalShouldBeInctive = ((_b = (0,_ts_utils_helper_functions_dom_functions__WEBPACK_IMPORTED_MODULE_0__.getClassListValues)(\r\n                    //@ts-ignore\r\n                    modalWindow)) === null || _b === void 0 ? void 0 : _b.includes(\"inactive\"))\r\n                        ? true\r\n                        : false;\r\n                    if (modalIsAlreadyOpened || modalShouldBeInctive) {\r\n                        return;\r\n                    }\r\n                    else {\r\n                        //@ts-ignore\r\n                        modalWindow.showModal();\r\n                    }\r\n                }\r\n                else {\r\n                    return;\r\n                }\r\n            }\r\n        });\r\n        const hoursSlot = (0,_ts_utils_helper_functions_dom_functions__WEBPACK_IMPORTED_MODULE_0__.selectQuery)(\".timer-dialog__slot--hours\", \r\n        //@ts-ignore\r\n        this.shadowRoot);\r\n        const minutesSlot = (0,_ts_utils_helper_functions_dom_functions__WEBPACK_IMPORTED_MODULE_0__.selectQuery)(\".timer-dialog__slot--minutes\", \r\n        //@ts-ignore\r\n        this.shadowRoot);\r\n        const secondsSlot = (0,_ts_utils_helper_functions_dom_functions__WEBPACK_IMPORTED_MODULE_0__.selectQuery)(\".timer-dialog__slot--seconds\", \r\n        //@ts-ignore\r\n        this.shadowRoot);\r\n        const allSlots = [hoursSlot, minutesSlot, secondsSlot];\r\n        function addEventListeners() {\r\n            for (const slot of allSlots) {\r\n                const [input, incrementButton, decrementButton] = (0,_ts_utils_helper_functions_dom_functions__WEBPACK_IMPORTED_MODULE_0__.getChildren)(slot);\r\n                input.addEventListener(\"input\", handleInput);\r\n                incrementButton.addEventListener(\"click\", handleButton);\r\n                decrementButton.addEventListener(\"click\", handleButton);\r\n            }\r\n        }\r\n        addEventListeners();\r\n        function handleInput(event) {\r\n            //@ts-ignore\r\n            verifyInputValue(event.target, false);\r\n        }\r\n        function handleButton(event) {\r\n            //@ts-ignore\r\n            const isIncrementButton = (0,_ts_utils_helper_functions_dom_functions__WEBPACK_IMPORTED_MODULE_0__.getClassListValues)(\r\n            //@ts-ignore\r\n            event.target).includes(\"timer-dialog__button--increment\");\r\n            const valueToSum = isIncrementButton ? 1 : -1;\r\n            //@ts-ignore\r\n            const slotContainer = (0,_ts_utils_helper_functions_dom_functions__WEBPACK_IMPORTED_MODULE_0__.getAncestor)(event.target, \".timer-dialog__slot\");\r\n            //@ts-ignore\r\n            const input = (0,_ts_utils_helper_functions_dom_functions__WEBPACK_IMPORTED_MODULE_0__.getChildren)(slotContainer)[0];\r\n            const newValue = Number(input.value) + Number(valueToSum);\r\n            input.value = newValue.toString();\r\n            verifyInputValue(input, true);\r\n        }\r\n        function verifyInputValue(inputElement, isButtonEvent) {\r\n            const classes = (0,_ts_utils_helper_functions_dom_functions__WEBPACK_IMPORTED_MODULE_0__.getClassListValues)(inputElement);\r\n            const isHoursInput = classes.includes(\"timer-dialog__input--hours\");\r\n            const inputLimit = isHoursInput ? 99 : 59;\r\n            if (isButtonEvent) {\r\n                const valueOfInputUnderflows = Number(inputElement.value) < 0;\r\n                if (valueOfInputUnderflows) {\r\n                    inputElement.value = inputLimit.toString().slice(-2);\r\n                }\r\n            }\r\n            const valueIsUnderTen = Number(inputElement.value) < 10;\r\n            if (valueIsUnderTen) {\r\n                inputElement.value = `0${inputElement.value.slice(-1)}`;\r\n            }\r\n            const valueOverflows = isHoursInput\r\n                ? Number(inputElement.value.slice(1, 3)) > 99\r\n                : Number(inputElement.value.slice(-2)) > 59;\r\n            if (valueOverflows) {\r\n                let currentValue = inputElement.value.slice(1, 3);\r\n                inputElement.value = `0${currentValue.slice(-1)}`;\r\n            }\r\n            const valueIsOverThreeDigits = inputElement.value.length > 2;\r\n            if (valueIsOverThreeDigits) {\r\n                inputElement.value = `${inputElement.value.slice(1, 3)}`;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Method called every time the element is removed from the DOM\r\n     */\r\n    disconnectedCallback() { }\r\n    /**\r\n     * Methods as a callback function that is called by the browser's web API\r\n     *  when an observed attribute of a custom element is added, removed, or changed.\r\n     *\r\n     * @param {string} name\r\n     */\r\n    attributeChangedCallback(name, oldValue, newValue) {\r\n        var _a, _b;\r\n        //@ts-ignore\r\n        const paragraph = (0,_ts_utils_helper_functions_dom_functions__WEBPACK_IMPORTED_MODULE_0__.selectQuery)(\".timer-component__paragraph\", \r\n        //@ts-ignore\r\n        this.shadowRoot);\r\n        //@ts-ignore\r\n        const container = (0,_ts_utils_helper_functions_dom_functions__WEBPACK_IMPORTED_MODULE_0__.selectQuery)(\".timer-component__container\", \r\n        //@ts-ignore\r\n        this.shadowRoot);\r\n        //We get the <timer-component> element through the button and get the total amount of seconds\r\n        //@ts-ignore\r\n        const timerComponent = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.host;\r\n        switch (name) {\r\n            case \"initial-time\": {\r\n                const { hours, minutes, seconds } = getTimeValues(this.initialTime);\r\n                paragraph.textContent = `${hours}:${minutes}:${seconds}`;\r\n                break;\r\n            }\r\n            case \"current-time\": {\r\n                //@ts-ignore\r\n                const svgCircleLength = (_b = this.svgCircle) === null || _b === void 0 ? void 0 : _b.getTotalLength();\r\n                /**\r\n                 * We set the style prop of these variables to equal to the svgLength\r\n                 */\r\n                (0,_ts_utils_helper_functions_dom_functions__WEBPACK_IMPORTED_MODULE_0__.setStyleProp)(\"--svg-dasharray\", `${svgCircleLength}`, container);\r\n                (0,_ts_utils_helper_functions_dom_functions__WEBPACK_IMPORTED_MODULE_0__.setStyleProp)(\"--svg-dashoffset\", `${svgCircleLength * (1 + this.currentTime / this.initialTime)}`, container);\r\n                const { hours, minutes, seconds } = getTimeValues(this.currentTime);\r\n                paragraph.textContent = `${hours}:${minutes}:${seconds}`;\r\n                break;\r\n            }\r\n            case \"timer-title\": {\r\n                //@ts-ignore\r\n                const title = (0,_ts_utils_helper_functions_dom_functions__WEBPACK_IMPORTED_MODULE_0__.selectQuery)(\".timer-component__title\", this.shadowRoot);\r\n                //@ts-ignore\r\n                title === null || title === void 0 ? void 0 : title.textContent = newValue;\r\n                break;\r\n            }\r\n            case \"is-running\": {\r\n                const timerIsRunning = newValue === \"true\" ? true : false;\r\n                const totalSeconds = Number(timerComponent.getAttribute(\"initial-time\"));\r\n                const currentSeconds = Number(timerComponent.getAttribute(\"current-time\"));\r\n                const timerHasNotStarted = totalSeconds === currentSeconds;\r\n                const timerHasStarted = totalSeconds !== currentSeconds;\r\n                const timerHasFinished = currentSeconds === 0;\r\n                //@ts-ignore\r\n                const restartButton = (0,_ts_utils_helper_functions_dom_functions__WEBPACK_IMPORTED_MODULE_0__.selectQuery)(\".timer-component__button--restart\", \r\n                //@ts-ignore\r\n                timerComponent);\r\n                //@ts-ignore\r\n                const playPauseButton = (0,_ts_utils_helper_functions_dom_functions__WEBPACK_IMPORTED_MODULE_0__.selectQuery)(\".timer-component__button--play\", \r\n                //@ts-ignore\r\n                timerComponent);\r\n                if (timerHasNotStarted) {\r\n                    //@ts-ignore\r\n                    (0,_ts_utils_helper_functions_dom_functions__WEBPACK_IMPORTED_MODULE_0__.replaceAttribute)(restartButton, \"disabled\", \"enabled\");\r\n                }\r\n                if (timerHasStarted) {\r\n                    //@ts-ignore\r\n                    const dialog = (0,_ts_utils_helper_functions_dom_functions__WEBPACK_IMPORTED_MODULE_0__.selectQuery)(\"dialog\", \r\n                    //@ts-ignore\r\n                    timerComponent);\r\n                    if (timerIsRunning) {\r\n                        dialog === null || dialog === void 0 ? void 0 : dialog.classList.add(\"inactive\");\r\n                    }\r\n                    else {\r\n                        dialog === null || dialog === void 0 ? void 0 : dialog.classList.remove(\"inactive\");\r\n                    }\r\n                }\r\n                if (timerHasFinished) {\r\n                    //@ts-ignore\r\n                    (0,_ts_utils_helper_functions_dom_functions__WEBPACK_IMPORTED_MODULE_0__.addModifyAttribute)(playPauseButton, \"disabled\", \"\");\r\n                    //@ts-ignore\r\n                    (0,_ts_utils_helper_functions_dom_functions__WEBPACK_IMPORTED_MODULE_0__.replaceAttribute)(restartButton, \"disabled\", \"enabled\");\r\n                }\r\n                break;\r\n            }\r\n            default: {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * Takes a total number of seconds and returns an object containing the equivalent in hours, minutes, and seconds.\r\n *\r\n * @param {number} totalSeconds - The total number of seconds.\r\n *\r\n * @returns {{hours: string, minutes: string, seconds: string}} An object containing the equivalent hours, minutes, and seconds.\r\n *\r\n */\r\nfunction getTimeValues(totalSeconds) {\r\n    const hours = totalSeconds / 3600 < 10\r\n        ? `0${Math.floor(totalSeconds / 3600)}`\r\n        : Math.floor(totalSeconds / 3600).toString();\r\n    const minutes = (totalSeconds / 60) % 60 < 10\r\n        ? `0${Math.floor((totalSeconds / 60) % 60)}`\r\n        : Math.floor((totalSeconds / 60) % 60).toString();\r\n    const seconds = totalSeconds % 60 < 10\r\n        ? `0${totalSeconds % 60}`\r\n        : (totalSeconds % 60).toString();\r\n    return { hours, minutes, seconds };\r\n}\r\n/**\r\n * We defined it so that we can use it\r\n */\r\ncustomElements.define(\"timer-component\", TimerComponent);\r\n// <timer-component></timer-component>\r\n\n\n//# sourceURL=webpack://21.-timerchrono/./src/components/Timer.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ts_utils_helper_functions_dom_functions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ts-utils/helper-functions/dom.functions */ \"./src/ts-utils/helper-functions/dom.functions.ts\");\n/* harmony import */ var _components_Timer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/Timer */ \"./src/components/Timer.ts\");\n/* harmony import */ var _ts_utils_helper_functions_console_funtions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ts-utils/helper-functions/console-funtions */ \"./src/ts-utils/helper-functions/console-funtions.ts\");\n/* harmony import */ var _ts_utils_helper_functions_dialog_functions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ts-utils/helper-functions/dialog.functions */ \"./src/ts-utils/helper-functions/dialog.functions.ts\");\n\r\n\r\n\r\n\r\nconst component = (0,_ts_utils_helper_functions_dom_functions__WEBPACK_IMPORTED_MODULE_0__.selectQuery)(\"timer-component\");\r\n/**\r\n * Button to delete the timer component\r\n * from the UI + local storage\r\n */\r\n//@ts-ignore\r\nconst removeTimersButton = (0,_ts_utils_helper_functions_dom_functions__WEBPACK_IMPORTED_MODULE_0__.selectQuery)(\".main-page__button--delete\");\r\n/**\r\n * Button to add the timer component\r\n * from the UI + local storage\r\n */\r\n//@ts-ignore\r\nconst addNewTimerButton = (0,_ts_utils_helper_functions_dom_functions__WEBPACK_IMPORTED_MODULE_0__.selectQuery)(\".main-page__button--add\");\r\n/**\r\n * `<dialog>` element opened whenever the user clicks on the `+` button\r\n */\r\n//@ts-ignore\r\nconst dialog = (0,_ts_utils_helper_functions_dom_functions__WEBPACK_IMPORTED_MODULE_0__.selectQuery)(\".main-page__dialog\");\r\n(0,_ts_utils_helper_functions_dialog_functions__WEBPACK_IMPORTED_MODULE_3__.addDialogBoxEventListeners)();\r\n(0,_ts_utils_helper_functions_console_funtions__WEBPACK_IMPORTED_MODULE_2__.log)({ removeTimersButton, addNewTimerButton });\r\nfunction addEventListeners() {\r\n    removeTimersButton.addEventListener(\"click\", (e) => {\r\n        (0,_ts_utils_helper_functions_console_funtions__WEBPACK_IMPORTED_MODULE_2__.log)(\"Del\", e);\r\n    });\r\n    addNewTimerButton.addEventListener(\"click\", (e) => {\r\n        (0,_ts_utils_helper_functions_console_funtions__WEBPACK_IMPORTED_MODULE_2__.log)(\"Add\", e);\r\n        (0,_ts_utils_helper_functions_dialog_functions__WEBPACK_IMPORTED_MODULE_3__.changeDialogBoxState)(dialog);\r\n    });\r\n}\r\naddEventListeners();\r\n\n\n//# sourceURL=webpack://21.-timerchrono/./src/index.ts?");

/***/ }),

/***/ "./src/ts-utils/helper-functions/console-funtions.ts":
/*!***********************************************************!*\
  !*** ./src/ts-utils/helper-functions/console-funtions.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"assert\": () => (/* binding */ assert),\n/* harmony export */   \"clear\": () => (/* binding */ clear),\n/* harmony export */   \"count\": () => (/* binding */ count),\n/* harmony export */   \"countReset\": () => (/* binding */ countReset),\n/* harmony export */   \"debug\": () => (/* binding */ debug),\n/* harmony export */   \"dir\": () => (/* binding */ dir),\n/* harmony export */   \"dirxml\": () => (/* binding */ dirxml),\n/* harmony export */   \"error\": () => (/* binding */ error),\n/* harmony export */   \"group\": () => (/* binding */ group),\n/* harmony export */   \"groupCollapsed\": () => (/* binding */ groupCollapsed),\n/* harmony export */   \"groupEnd\": () => (/* binding */ groupEnd),\n/* harmony export */   \"info\": () => (/* binding */ info),\n/* harmony export */   \"log\": () => (/* binding */ log),\n/* harmony export */   \"profile\": () => (/* binding */ profile),\n/* harmony export */   \"profileEnd\": () => (/* binding */ profileEnd),\n/* harmony export */   \"table\": () => (/* binding */ table),\n/* harmony export */   \"time\": () => (/* binding */ time),\n/* harmony export */   \"timeEnd\": () => (/* binding */ timeEnd),\n/* harmony export */   \"timeLog\": () => (/* binding */ timeLog),\n/* harmony export */   \"timeStamp\": () => (/* binding */ timeStamp),\n/* harmony export */   \"trace\": () => (/* binding */ trace),\n/* harmony export */   \"warn\": () => (/* binding */ warn)\n/* harmony export */ });\n/**\r\n * The console methods are exported as separate methods through destructuring\r\n */\r\nconst { log, error, table, time, timeEnd, timeStamp, timeLog, assert, clear, count, countReset, group, groupCollapsed, groupEnd, trace, profile, profileEnd, warn, debug, info, dir, dirxml, } = console;\r\n\n\n//# sourceURL=webpack://21.-timerchrono/./src/ts-utils/helper-functions/console-funtions.ts?");

/***/ }),

/***/ "./src/ts-utils/helper-functions/dialog.functions.ts":
/*!***********************************************************!*\
  !*** ./src/ts-utils/helper-functions/dialog.functions.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"addDialogBoxEventListeners\": () => (/* binding */ addDialogBoxEventListeners),\n/* harmony export */   \"changeDialogBoxState\": () => (/* binding */ changeDialogBoxState),\n/* harmony export */   \"handleButton\": () => (/* binding */ handleButton),\n/* harmony export */   \"handleInput\": () => (/* binding */ handleInput),\n/* harmony export */   \"verifyInputValue\": () => (/* binding */ verifyInputValue)\n/* harmony export */ });\n/* harmony import */ var _dom_functions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom.functions */ \"./src/ts-utils/helper-functions/dom.functions.ts\");\n\r\n/**\r\n * Opens or closes a dialog box.\r\n * @param dialog The HTMLDialogElement to open or close.\r\n */\r\nfunction changeDialogBoxState(dialog) {\r\n    const modalIsAlreadyOpened = dialog === null || dialog === void 0 ? void 0 : dialog.hasAttribute(\"open\");\r\n    if (modalIsAlreadyOpened) {\r\n        dialog.close();\r\n        return;\r\n    }\r\n    else {\r\n        dialog.showModal();\r\n    }\r\n}\r\n/**\r\n * Adds event listeners to dialog box slots for time input\r\n *\r\n * @returns void\r\n */\r\nfunction addDialogBoxEventListeners() {\r\n    //@ts-ignore\r\n    const hoursSlot = (0,_dom_functions__WEBPACK_IMPORTED_MODULE_0__.selectQuery)(\".main-page__dialog-slot--hours\");\r\n    //@ts-ignore\r\n    const minutesSlot = (0,_dom_functions__WEBPACK_IMPORTED_MODULE_0__.selectQuery)(\".main-page__dialog-slot--minutes\");\r\n    //@ts-ignore\r\n    const secondsSlot = (0,_dom_functions__WEBPACK_IMPORTED_MODULE_0__.selectQuery)(\".main-page__dialog-slot--seconds\");\r\n    const allSlots = [hoursSlot, minutesSlot, secondsSlot];\r\n    for (const slot of allSlots) {\r\n        const [input, incrementButton, decrementButton] = (0,_dom_functions__WEBPACK_IMPORTED_MODULE_0__.getChildren)(slot);\r\n        input === null || input === void 0 ? void 0 : input.addEventListener(\"input\", handleInput);\r\n        incrementButton === null || incrementButton === void 0 ? void 0 : incrementButton.addEventListener(\"click\", handleButton);\r\n        decrementButton === null || decrementButton === void 0 ? void 0 : decrementButton.addEventListener(\"click\", handleButton);\r\n    }\r\n}\r\n/**\r\n * Handles the input event for dialog box slots for time input\r\n *\r\n * @param {InputEvent} event - The input event\r\n *\r\n * @returns void\r\n */\r\nfunction handleInput(event) {\r\n    //@ts-ignore\r\n    verifyInputValue(event.target, false);\r\n}\r\n/**\r\n * Handles the button click event for dialog box slots for time input\r\n *\r\n * @param {MouseEvent} event - The mouse click event\r\n *\r\n * @returns void\r\n */\r\nfunction handleButton(event) {\r\n    //@ts-ignore\r\n    const isIncrementButton = (0,_dom_functions__WEBPACK_IMPORTED_MODULE_0__.getClassListValues)(\r\n    //@ts-ignore\r\n    event.target).includes(\"main-page__dialog-button--increment\");\r\n    const valueToSum = isIncrementButton ? 1 : -1;\r\n    //@ts-ignore\r\n    const slotContainer = (0,_dom_functions__WEBPACK_IMPORTED_MODULE_0__.getAncestor)(event.target, \".main-page__dialog-slot\");\r\n    //@ts-ignore\r\n    const input = (0,_dom_functions__WEBPACK_IMPORTED_MODULE_0__.getChildren)(slotContainer)[0];\r\n    const newValue = Number(input.value) + Number(valueToSum);\r\n    input.value = newValue.toString();\r\n    verifyInputValue(input, true);\r\n}\r\n/**\r\n * Verifies the input value of dialog box slots for time input and updates it if necessary\r\n *\r\n * @param {HTMLInputElement} inputElement - The input element to verify and update\r\n * @param {boolean} isButtonEvent - A flag to indicate if the verification was triggered by a button click event\r\n *\r\n * @returns void\r\n */\r\nfunction verifyInputValue(inputElement, isButtonEvent) {\r\n    const classes = (0,_dom_functions__WEBPACK_IMPORTED_MODULE_0__.getClassListValues)(inputElement);\r\n    const isHoursInput = classes.includes(\"main-page__dialog-input--hours\");\r\n    const inputLimit = isHoursInput ? 99 : 59;\r\n    if (isButtonEvent) {\r\n        const valueOfInputUnderflows = Number(inputElement.value) < 0;\r\n        if (valueOfInputUnderflows) {\r\n            inputElement.value = inputLimit.toString().slice(-2);\r\n        }\r\n    }\r\n    const valueIsUnderTen = Number(inputElement.value) < 10;\r\n    if (valueIsUnderTen) {\r\n        inputElement.value = `0${inputElement.value.slice(-1)}`;\r\n    }\r\n    const valueOverflows = isHoursInput\r\n        ? Number(inputElement.value.slice(1, 3)) > 99\r\n        : Number(inputElement.value.slice(-2)) > 59;\r\n    if (valueOverflows) {\r\n        let currentValue = inputElement.value.slice(1, 3);\r\n        inputElement.value = `0${currentValue.slice(-1)}`;\r\n    }\r\n    const valueIsOverThreeDigits = inputElement.value.length > 2;\r\n    if (valueIsOverThreeDigits) {\r\n        inputElement.value = `${inputElement.value.slice(1, 3)}`;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://21.-timerchrono/./src/ts-utils/helper-functions/dialog.functions.ts?");

/***/ }),

/***/ "./src/ts-utils/helper-functions/dom.functions.ts":
/*!********************************************************!*\
  !*** ./src/ts-utils/helper-functions/dom.functions.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"addModifyAttribute\": () => (/* binding */ addModifyAttribute),\n/* harmony export */   \"getAncestor\": () => (/* binding */ getAncestor),\n/* harmony export */   \"getChildren\": () => (/* binding */ getChildren),\n/* harmony export */   \"getClassListValues\": () => (/* binding */ getClassListValues),\n/* harmony export */   \"getComponentHost\": () => (/* binding */ getComponentHost),\n/* harmony export */   \"getSibling\": () => (/* binding */ getSibling),\n/* harmony export */   \"replaceAttribute\": () => (/* binding */ replaceAttribute),\n/* harmony export */   \"selectQuery\": () => (/* binding */ selectQuery),\n/* harmony export */   \"selectQueryAll\": () => (/* binding */ selectQueryAll),\n/* harmony export */   \"setStyleProp\": () => (/* binding */ setStyleProp)\n/* harmony export */ });\n/**\r\n * A simplified version of `document.querySelector()`\r\n *\r\n * @param {string} query - HTML Element to select\r\n * @param {HTMLElement} container - HTML Element to select the query from\r\n * @returns  - The element selected or `null` if the element doesn't exist\r\n */\r\nfunction selectQuery(query, container) {\r\n    var _a;\r\n    if (!container) {\r\n        return document.querySelector(query);\r\n    }\r\n    /**\r\n     * We check if it's a web component, they always have a hyphen in their tag name\r\n     */\r\n    const isWebComponent = (_a = container === null || container === void 0 ? void 0 : container.tagName) === null || _a === void 0 ? void 0 : _a.includes(\"-\");\r\n    if (isWebComponent) {\r\n        //@ts-ignore\r\n        return container.shadowRoot.querySelector(query);\r\n    }\r\n    return container.querySelector(query);\r\n}\r\n/**\r\n * A simplified version of `document.querySelectorAll()`\r\n *\r\n * @param {string} query - HTML Element to select\r\n * @param {HTMLElement} container - HTML Element to select the query from\r\n * @returns {HTMLElement[]|null} - An array with all the elements selected or `null` if the element doesn't exist\r\n */\r\nfunction selectQueryAll(query, container) {\r\n    if (!container) {\r\n        return Array.from(document.querySelectorAll(query));\r\n    }\r\n    const isWebComponent = container.tagName.includes(\"-\");\r\n    if (isWebComponent) {\r\n        //@ts-ignore\r\n        return Array.from(container.shadowRoot.querySelectorAll(query));\r\n    }\r\n    return Array.from(container.querySelectorAll(query));\r\n}\r\n/**\r\n * Function that returns an array containing all child nodes of an HTML element.\r\n *\r\n * @param {HTMLElement} elementOfReference The parent HTML element whose children to select.\r\n * @returns {Element[]} An array containing all child nodes of the parent element or null if the parent element has no children.\r\n */\r\nfunction getChildren(elementOfReference) {\r\n    if (!elementOfReference) {\r\n        return [];\r\n    }\r\n    return Array.from(elementOfReference.children);\r\n}\r\n/**\r\n * Returns the closest ancestor element of a given HTML element based on a CSS selector.\r\n *\r\n * @param {HTMLElement} elementOfReference - The HTML element of reference.\r\n * @param {string} [cssSelector=\"\"] - The CSS selector to use to select the ancestor element. Default is an empty string.\r\n *\r\n * @returns {HTMLElement|null} The closest ancestor element that matches the CSS selector, or null if no ancestor element matches the selector.\r\n */\r\nfunction getAncestor(elementOfReference, cssSelector = \"\") {\r\n    return elementOfReference.closest(cssSelector);\r\n}\r\n/**\r\n *Returns the host element of a web component given a reference element within it.\r\n *\r\n *@param {Element} elementOfReference - An element that is a child of the web component.\r\n *\r\n * @returns {Element} - The host element of the web component.\r\n */\r\nfunction getComponentHost(elementOfReference) {\r\n    //@ts-ignore\r\n    return elementOfReference.getRootNode().host;\r\n}\r\n/**\r\n * Returns the next sibling element of the specified element.\r\n *\r\n * @param {HTMLElement} elementOfReference - The reference element whose sibling to return.\r\n * @returns {HTMLElement | null} The next sibling element, or null if there is none.\r\n */\r\nfunction getSibling(elementOfReference) {\r\n    //@ts-ignore\r\n    return elementOfReference.nextElementSibling;\r\n}\r\n/**\r\n *\r\n * Returns an array of strings representing the classes of the specified element.\r\n *\r\n * @param {HTMLElement} elementOfReference - The element to retrieve class values from.\r\n *\r\n * @returns An array of strings representing the classes of the specified element.\r\n */\r\nfunction getClassListValues(elementOfReference) {\r\n    return Array.from(elementOfReference.classList);\r\n}\r\n/**\r\n * Sets the value of a specified CSS property for the given HTML element.\r\n *\r\n * @param {string} property - The name of the style property to set.\r\n * @param {any} value - The value to set for the specified style property.\r\n * @param {HTMLElement} [element=document.body] - The HTML element to set the style property for, ***NOT mandatory***.\r\n\r\n* @returns {void}\r\n */\r\nfunction setStyleProp(property, value, element = document.body) {\r\n    const stringifiedValue = value.toString();\r\n    return element.style.setProperty(property, stringifiedValue);\r\n}\r\n/**\r\n * Adds or modifies an attribute to the given element.\r\n *\r\n * @param element The element to add the attribute to.\r\n * @param property The name of the attribute to add.\r\n * @param value The value to set the attribute to.\r\n */\r\nfunction addModifyAttribute(element, property, value) {\r\n    element.setAttribute(property, value.toString());\r\n}\r\n/**\r\n * Removes an attribute from an element and sets a new attribute in its place.\r\n *\r\n * @param {Element} element - The element from which to remove the attribute.\r\n * @param {string} oldAttribute - The name of the attribute to remove.\r\n * @param {string} newAttribute - The name of the new attribute to set.\r\n */\r\nfunction replaceAttribute(element, oldAttribute, newAttribute) {\r\n    element.removeAttribute(oldAttribute);\r\n    element.setAttribute(newAttribute, \"\");\r\n}\r\n\n\n//# sourceURL=webpack://21.-timerchrono/./src/ts-utils/helper-functions/dom.functions.ts?");

/***/ }),

/***/ "./src/ts-utils/helper-functions/timer-component.functions.ts":
/*!********************************************************************!*\
  !*** ./src/ts-utils/helper-functions/timer-component.functions.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"handleButtonEvents\": () => (/* binding */ handleButtonEvents),\n/* harmony export */   \"handleDialogButtons\": () => (/* binding */ handleDialogButtons),\n/* harmony export */   \"handlePlayButton\": () => (/* binding */ handlePlayButton),\n/* harmony export */   \"handleRestartButton\": () => (/* binding */ handleRestartButton)\n/* harmony export */ });\n/* harmony import */ var _console_funtions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./console-funtions */ \"./src/ts-utils/helper-functions/console-funtions.ts\");\n/* harmony import */ var _dom_functions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom.functions */ \"./src/ts-utils/helper-functions/dom.functions.ts\");\n/* harmony import */ var _services_interval_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/interval.service */ \"./src/ts-utils/services/interval.service.ts\");\n//Utils\r\n\r\n\r\n\r\n//\r\n/**\r\n * Handles click events on the timer button elements\r\n *\r\n * @param {any} buttonElement - The timer button element\r\n * @returns {void}\r\n */\r\nfunction handleButtonEvents(buttonElement) {\r\n    const buttonClasses = (0,_dom_functions__WEBPACK_IMPORTED_MODULE_1__.getClassListValues)(buttonElement);\r\n    (0,_console_funtions__WEBPACK_IMPORTED_MODULE_0__.log)(buttonClasses);\r\n    const isPlayButton = buttonClasses.includes(\"timer-component__button--play\");\r\n    const isRestartButton = buttonClasses.includes(\"timer-component__button--restart\");\r\n    const isDeleteButton = buttonClasses.includes(\"timer-dialog__delete\");\r\n    const isTimerDialogButton = buttonClasses.includes(\"timer-dialog__button\");\r\n    const isRegisterButton = buttonClasses.includes(\"timer-dialog__button--register\");\r\n    const isCancelButton = buttonClasses.includes(\"timer-dialog__button--cancel\");\r\n    const isDialogButton = isDeleteButton || isTimerDialogButton || isRegisterButton || isCancelButton;\r\n    if (isPlayButton) {\r\n        handlePlayButton(buttonElement);\r\n    }\r\n    else if (isRestartButton) {\r\n        handleRestartButton(buttonElement);\r\n    }\r\n    else if (isDialogButton) {\r\n        handleDialogButtons(buttonElement);\r\n    }\r\n    else {\r\n        (0,_console_funtions__WEBPACK_IMPORTED_MODULE_0__.log)(\"Unknown button pressed\");\r\n    }\r\n}\r\n/**\r\n * Handles click events on the play button element\r\n * @param {any} buttonElement - The play button element\r\n * @returns {void}\r\n */\r\nfunction handlePlayButton(buttonElement) {\r\n    //We get the svgs inside the play button\r\n    const [playSvg, pauseSvg] = (0,_dom_functions__WEBPACK_IMPORTED_MODULE_1__.getChildren)(buttonElement);\r\n    //We get the <timer-component> element through the button and get the total amount of seconds\r\n    const timerComponent = (0,_dom_functions__WEBPACK_IMPORTED_MODULE_1__.getComponentHost)(buttonElement);\r\n    /**\r\n     * We check if the timer was paused before cliking the button\r\n     */\r\n    const timerWasPaused = (0,_dom_functions__WEBPACK_IMPORTED_MODULE_1__.getClassListValues)(pauseSvg).includes(\"hide\");\r\n    //@ts-ignore\r\n    let callback = null;\r\n    //@ts-ignore\r\n    const dialog = (0,_dom_functions__WEBPACK_IMPORTED_MODULE_1__.selectQuery)(\"dialog\", timerComponent);\r\n    //We create closures to make the code more readable\r\n    function showPlayButton() {\r\n        pauseSvg.classList.add(\"hide\");\r\n        playSvg.classList.remove(\"hide\");\r\n        (0,_dom_functions__WEBPACK_IMPORTED_MODULE_1__.addModifyAttribute)(timerComponent, \"is-running\", false);\r\n    }\r\n    function showPauseButton() {\r\n        pauseSvg.classList.remove(\"hide\");\r\n        playSvg.classList.add(\"hide\");\r\n        (0,_dom_functions__WEBPACK_IMPORTED_MODULE_1__.addModifyAttribute)(timerComponent, \"is-running\", true);\r\n    }\r\n    function startTimer() {\r\n        dialog === null || dialog === void 0 ? void 0 : dialog.classList.add(\"inactive\");\r\n        (0,_dom_functions__WEBPACK_IMPORTED_MODULE_1__.addModifyAttribute)(timerComponent, \"is-running\", true);\r\n        callback = _services_interval_service__WEBPACK_IMPORTED_MODULE_2__.Interval.set(() => {\r\n            let currentAmountOfSeconds = Number(timerComponent.getAttribute(\"current-time\"));\r\n            const countdownFinished = currentAmountOfSeconds <= 0;\r\n            if (countdownFinished) {\r\n                //@ts-ignore\r\n                _services_interval_service__WEBPACK_IMPORTED_MODULE_2__.Interval.clear(callback);\r\n                showPlayButton();\r\n                return;\r\n            }\r\n            //We decrease the amount of seconds\r\n            currentAmountOfSeconds--;\r\n            //We modify the amount of seconds in the current-time attribute that will update the web component\r\n            (0,_dom_functions__WEBPACK_IMPORTED_MODULE_1__.addModifyAttribute)(timerComponent, \"current-time\", currentAmountOfSeconds);\r\n        }, 1000);\r\n        (0,_dom_functions__WEBPACK_IMPORTED_MODULE_1__.addModifyAttribute)(timerComponent, \"interval-id\", callback);\r\n    }\r\n    function stopTimer() {\r\n        const timerIntervalId = Number(timerComponent.getAttribute(\"interval-id\"));\r\n        //we're supposed to clear the timer here\r\n        //@ts-ignore\r\n        _services_interval_service__WEBPACK_IMPORTED_MODULE_2__.Interval.clear(timerIntervalId);\r\n        (0,_dom_functions__WEBPACK_IMPORTED_MODULE_1__.addModifyAttribute)(timerComponent, \"is-running\", false);\r\n    }\r\n    if (timerWasPaused) {\r\n        //The button was clicked, the timer was paused and is now running\r\n        (0,_console_funtions__WEBPACK_IMPORTED_MODULE_0__.log)(\"Is running\");\r\n        //we show the paused icon\r\n        showPauseButton();\r\n        //We start the timer\r\n        startTimer();\r\n    }\r\n    else {\r\n        //The button was clicked, the timer was running and is now paused,\r\n        (0,_console_funtions__WEBPACK_IMPORTED_MODULE_0__.log)(\"Is paused\");\r\n        //we show the play icon\r\n        showPlayButton();\r\n        //We clear the timer\r\n        stopTimer();\r\n    }\r\n}\r\n/**\r\n * Handles click events on the restart button element\r\n * @param {any} buttonElement - The restart button element\r\n * @returns {void}\r\n */\r\nfunction handleRestartButton(buttonElement) {\r\n    (0,_console_funtions__WEBPACK_IMPORTED_MODULE_0__.log)(\"restart button\", { buttonElement });\r\n    //@ts-ignore\r\n    const timerComponent = (0,_dom_functions__WEBPACK_IMPORTED_MODULE_1__.getComponentHost)(buttonElement);\r\n    const totalSeconds = Number(timerComponent.getAttribute(\"initial-time\"));\r\n    (0,_dom_functions__WEBPACK_IMPORTED_MODULE_1__.addModifyAttribute)(timerComponent, \"current-time\", totalSeconds);\r\n    const playPauseButton = (0,_dom_functions__WEBPACK_IMPORTED_MODULE_1__.selectQuery)(\".timer-component__button--play\", \r\n    //@ts-ignore\r\n    timerComponent);\r\n    //@ts-ignore\r\n    const playButtonIsDisabled = playPauseButton === null || playPauseButton === void 0 ? void 0 : playPauseButton.disabled;\r\n    if (playButtonIsDisabled) {\r\n        (0,_dom_functions__WEBPACK_IMPORTED_MODULE_1__.replaceAttribute)(playPauseButton, \"disabled\", \"enabled\");\r\n    }\r\n}\r\n/**\r\n * Handles the click events for buttons in a timer dialog.\r\n * @param buttonElement The button element that was clicked.\r\n */\r\nfunction handleDialogButtons(buttonElement) {\r\n    // Get an array of classes for the clicked button element\r\n    const buttonClasses = (0,_dom_functions__WEBPACK_IMPORTED_MODULE_1__.getClassListValues)(buttonElement);\r\n    // Determine which type of button was clicked\r\n    const isDeleteButton = buttonClasses.includes(\"timer-dialog__delete\");\r\n    const isTimerDialogButton = buttonClasses.includes(\"timer-dialog__button\");\r\n    const isRegisterButton = buttonClasses.includes(\"timer-dialog__button--register\");\r\n    const isCancelButton = buttonClasses.includes(\"timer-dialog__button--cancel\");\r\n    // Get the parent dialog element that contains the clicked button\r\n    const modalWindow = (0,_dom_functions__WEBPACK_IMPORTED_MODULE_1__.getAncestor)(buttonElement, \"dialog\");\r\n    // Get the timer component host element associated with the dialog\r\n    //@ts-ignore\r\n    const timerComponent = (0,_dom_functions__WEBPACK_IMPORTED_MODULE_1__.getComponentHost)(modalWindow);\r\n    const playPauseButton = (0,_dom_functions__WEBPACK_IMPORTED_MODULE_1__.selectQuery)(\".timer-component__button--play\", \r\n    //@ts-ignore\r\n    timerComponent);\r\n    const restartPauseButton = (0,_dom_functions__WEBPACK_IMPORTED_MODULE_1__.selectQuery)(\".timer-component__button--restart\", \r\n    //@ts-ignore\r\n    timerComponent);\r\n    // Get an array of input elements in the dialog\r\n    //@ts-ignore\r\n    const inputs = (0,_dom_functions__WEBPACK_IMPORTED_MODULE_1__.selectQueryAll)(\"input\", modalWindow);\r\n    // Handle different button types\r\n    if (isDeleteButton) {\r\n    }\r\n    else if (isTimerDialogButton) {\r\n        // Determine whether an increment or decrement button was clicked\r\n    }\r\n    else if (isRegisterButton) {\r\n        // Get the values of the input elements and convert them to numbers\r\n        let inputsValues = [];\r\n        if (inputs) {\r\n            for (const input of inputs) {\r\n                //@ts-ignore\r\n                const valueOfInput = input.value;\r\n                inputsValues.push(valueOfInput);\r\n            }\r\n        }\r\n        const hoursValue = Number(inputsValues[0]);\r\n        const minutesValue = Number(inputsValues[1]);\r\n        const secondsValue = Number(inputsValues[2]);\r\n        // Calculate the total time in seconds from the input values\r\n        const totalTimeInSeconds = 3600 * hoursValue + 60 * minutesValue + secondsValue;\r\n        const titleValue = inputsValues[3];\r\n        // Set the initial and current time attributes of the timer component\r\n        (0,_dom_functions__WEBPACK_IMPORTED_MODULE_1__.addModifyAttribute)(timerComponent, \"initial-time\", totalTimeInSeconds);\r\n        (0,_dom_functions__WEBPACK_IMPORTED_MODULE_1__.addModifyAttribute)(timerComponent, \"current-time\", totalTimeInSeconds);\r\n        (0,_dom_functions__WEBPACK_IMPORTED_MODULE_1__.addModifyAttribute)(timerComponent, \"timer-title\", titleValue);\r\n        //@ts-ignore\r\n        (0,_dom_functions__WEBPACK_IMPORTED_MODULE_1__.replaceAttribute)(playPauseButton, \"disabled\", \"enabled\");\r\n        //@ts-ignore\r\n        (0,_dom_functions__WEBPACK_IMPORTED_MODULE_1__.replaceAttribute)(restartPauseButton, \"enabled\", \"disabled\");\r\n        // Close the dialog\r\n        //@ts-ignore\r\n        modalWindow.close();\r\n    }\r\n    else if (isCancelButton) {\r\n        // Close the dialog\r\n        //@ts-ignore\r\n        modalWindow.close();\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://21.-timerchrono/./src/ts-utils/helper-functions/timer-component.functions.ts?");

/***/ }),

/***/ "./src/ts-utils/services/interval.service.ts":
/*!***************************************************!*\
  !*** ./src/ts-utils/services/interval.service.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Interval\": () => (/* binding */ Interval)\n/* harmony export */ });\n/**\r\n * Utility class that sets and clears intervals\r\n */\r\nclass Interval {\r\n    constructor() { }\r\n    /**\r\n     * Method that creates an interval\r\n     *\r\n     * @param {(...args: any) => any | void} callback Callback function that will be called after the timer runs out\r\n     * @param milliseconds Duration of the timer in milliseconds before executing the callback function\r\n     * @returns A number as an ID for the interval\r\n     *\r\n     * @example\r\n     * let fct = () => {\r\n     *   console.log(\"Hello World\");\r\n     * };\r\n     *\r\n     * let intervalTrigger = Interval.set(fct, 2_500);\r\n     *\r\n     */\r\n    static set(callback, milliseconds) {\r\n        this.id = setInterval(() => {\r\n            callback();\r\n        }, milliseconds);\r\n        this.arrayOfIds.push(this.id);\r\n        return this.id;\r\n    }\r\n    /**\r\n     * Method that clears an interval\r\n     *\r\n     * @param {number} id ID of the interval to clear (stored inside the trigger of the interval)\r\n     *\r\n     * @example\r\n     *\r\n     * function fct() {\r\n     *   console.log(\"Hello world!\");\r\n     * }\r\n     *\r\n     *\r\n     * let intervalTrigger = Interval.set(fct, 2_500);\r\n     *\r\n     * // ...\r\n     *\r\n     * Interval.clear(intervalTrigger);\r\n     *\r\n     */\r\n    static clear(id) {\r\n        const actualId = this.arrayOfIds.filter((idNumber) => {\r\n            return idNumber === id;\r\n        })[0];\r\n        clearInterval(actualId);\r\n        this.arrayOfIds = this.arrayOfIds.filter((idNumber) => {\r\n            return idNumber !== actualId;\r\n        });\r\n    }\r\n}\r\nInterval.arrayOfIds = [];\r\n\n\n//# sourceURL=webpack://21.-timerchrono/./src/ts-utils/services/interval.service.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;